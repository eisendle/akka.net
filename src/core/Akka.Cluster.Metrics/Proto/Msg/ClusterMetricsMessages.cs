// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Akka.Cluster.Metrics.Proto.Msg {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal static partial class ClusterMetricsMessages {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_MetricsGossipEnvelope__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Metrics.Proto.Msg.MetricsGossipEnvelope, global::Akka.Cluster.Metrics.Proto.Msg.MetricsGossipEnvelope.Builder> internal__static_MetricsGossipEnvelope__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MetricsGossip__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Metrics.Proto.Msg.MetricsGossip, global::Akka.Cluster.Metrics.Proto.Msg.MetricsGossip.Builder> internal__static_MetricsGossip__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_NodeMetrics__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics, global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Builder> internal__static_NodeMetrics__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_NodeMetrics_Number__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Number, global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Number.Builder> internal__static_NodeMetrics_Number__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_NodeMetrics_EWMA__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.EWMA, global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.EWMA.Builder> internal__static_NodeMetrics_EWMA__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_NodeMetrics_Metric__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Metric, global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Metric.Builder> internal__static_NodeMetrics_Metric__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Address__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Metrics.Proto.Msg.Address, global::Akka.Cluster.Metrics.Proto.Msg.Address.Builder> internal__static_Address__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static ClusterMetricsMessages() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChxDbHVzdGVyTWV0cmljc01lc3NhZ2VzLnByb3RvIl4KFU1ldHJpY3NHb3Nz" + 
          "aXBFbnZlbG9wZRIWCgRmcm9tGAEgAigLMgguQWRkcmVzcxIeCgZnb3NzaXAY" + 
          "AiACKAsyDi5NZXRyaWNzR29zc2lwEg0KBXJlcGx5GAMgAigIImoKDU1ldHJp" + 
          "Y3NHb3NzaXASHgoMYWxsQWRkcmVzc2VzGAEgAygLMgguQWRkcmVzcxIWCg5h" + 
          "bGxNZXRyaWNOYW1lcxgCIAMoCRIhCgtub2RlTWV0cmljcxgDIAMoCzIMLk5v" + 
          "ZGVNZXRyaWNzIpgDCgtOb2RlTWV0cmljcxIUCgxhZGRyZXNzSW5kZXgYASAC" + 
          "KAUSEQoJdGltZXN0YW1wGAIgAigDEiQKB21ldHJpY3MYAyADKAsyEy5Ob2Rl" + 
          "TWV0cmljcy5NZXRyaWMaZQoGTnVtYmVyEiUKBHR5cGUYASACKA4yFy5Ob2Rl" + 
          "TWV0cmljcy5OdW1iZXJUeXBlEg8KB3ZhbHVlMzIYAiABKA0SDwoHdmFsdWU2" + 
          "NBgDIAEoBBISCgpzZXJpYWxpemVkGAQgASgMGiQKBEVXTUESDQoFdmFsdWUY" + 
          "ASACKAESDQoFYWxwaGEYAiACKAEaYQoGTWV0cmljEhEKCW5hbWVJbmRleBgB" + 
          "IAIoBRIjCgZudW1iZXIYAiACKAsyEy5Ob2RlTWV0cmljcy5OdW1iZXISHwoE" + 
          "ZXdtYRgDIAEoCzIRLk5vZGVNZXRyaWNzLkVXTUEiSgoKTnVtYmVyVHlwZRIO" + 
          "CgpTZXJpYWxpemVkEAASCgoGRG91YmxlEAESCQoFRmxvYXQQAhILCgdJbnRl" + 
          "Z2VyEAMSCAoETG9uZxAEIksKB0FkZHJlc3MSDgoGc3lzdGVtGAEgAigJEhAK" + 
          "CGhvc3RuYW1lGAIgAigJEgwKBHBvcnQYAyACKA0SEAoIcHJvdG9jb2wYBCAB" + 
          "KAk=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_MetricsGossipEnvelope__Descriptor = Descriptor.MessageTypes[0];
        internal__static_MetricsGossipEnvelope__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Metrics.Proto.Msg.MetricsGossipEnvelope, global::Akka.Cluster.Metrics.Proto.Msg.MetricsGossipEnvelope.Builder>(internal__static_MetricsGossipEnvelope__Descriptor,
                new string[] { "From", "Gossip", "Reply", });
        internal__static_MetricsGossip__Descriptor = Descriptor.MessageTypes[1];
        internal__static_MetricsGossip__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Metrics.Proto.Msg.MetricsGossip, global::Akka.Cluster.Metrics.Proto.Msg.MetricsGossip.Builder>(internal__static_MetricsGossip__Descriptor,
                new string[] { "AllAddresses", "AllMetricNames", "NodeMetrics", });
        internal__static_NodeMetrics__Descriptor = Descriptor.MessageTypes[2];
        internal__static_NodeMetrics__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics, global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Builder>(internal__static_NodeMetrics__Descriptor,
                new string[] { "AddressIndex", "Timestamp", "Metrics", });
        internal__static_NodeMetrics_Number__Descriptor = internal__static_NodeMetrics__Descriptor.NestedTypes[0];
        internal__static_NodeMetrics_Number__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Number, global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Number.Builder>(internal__static_NodeMetrics_Number__Descriptor,
                new string[] { "Type", "Value32", "Value64", "Serialized", });
        internal__static_NodeMetrics_EWMA__Descriptor = internal__static_NodeMetrics__Descriptor.NestedTypes[1];
        internal__static_NodeMetrics_EWMA__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.EWMA, global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.EWMA.Builder>(internal__static_NodeMetrics_EWMA__Descriptor,
                new string[] { "Value", "Alpha", });
        internal__static_NodeMetrics_Metric__Descriptor = internal__static_NodeMetrics__Descriptor.NestedTypes[2];
        internal__static_NodeMetrics_Metric__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Metric, global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Metric.Builder>(internal__static_NodeMetrics_Metric__Descriptor,
                new string[] { "NameIndex", "Number", "Ewma", });
        internal__static_Address__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Address__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.Metrics.Proto.Msg.Address, global::Akka.Cluster.Metrics.Proto.Msg.Address.Builder>(internal__static_Address__Descriptor,
                new string[] { "System", "Hostname", "Port", "Protocol", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class MetricsGossipEnvelope : pb::GeneratedMessage<MetricsGossipEnvelope, MetricsGossipEnvelope.Builder> {
    private MetricsGossipEnvelope() { }
    private static readonly MetricsGossipEnvelope defaultInstance = new MetricsGossipEnvelope().MakeReadOnly();
    private static readonly string[] _metricsGossipEnvelopeFieldNames = new string[] { "from", "gossip", "reply" };
    private static readonly uint[] _metricsGossipEnvelopeFieldTags = new uint[] { 10, 18, 24 };
    public static MetricsGossipEnvelope DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MetricsGossipEnvelope DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MetricsGossipEnvelope ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Metrics.Proto.Msg.ClusterMetricsMessages.internal__static_MetricsGossipEnvelope__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MetricsGossipEnvelope, MetricsGossipEnvelope.Builder> InternalFieldAccessors {
      get { return global::Akka.Cluster.Metrics.Proto.Msg.ClusterMetricsMessages.internal__static_MetricsGossipEnvelope__FieldAccessorTable; }
    }
    
    public const int FromFieldNumber = 1;
    private bool hasFrom;
    private global::Akka.Cluster.Metrics.Proto.Msg.Address from_;
    public bool HasFrom {
      get { return hasFrom; }
    }
    public global::Akka.Cluster.Metrics.Proto.Msg.Address From {
      get { return from_ ?? global::Akka.Cluster.Metrics.Proto.Msg.Address.DefaultInstance; }
    }
    
    public const int GossipFieldNumber = 2;
    private bool hasGossip;
    private global::Akka.Cluster.Metrics.Proto.Msg.MetricsGossip gossip_;
    public bool HasGossip {
      get { return hasGossip; }
    }
    public global::Akka.Cluster.Metrics.Proto.Msg.MetricsGossip Gossip {
      get { return gossip_ ?? global::Akka.Cluster.Metrics.Proto.Msg.MetricsGossip.DefaultInstance; }
    }
    
    public const int ReplyFieldNumber = 3;
    private bool hasReply;
    private bool reply_;
    public bool HasReply {
      get { return hasReply; }
    }
    public bool Reply {
      get { return reply_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFrom) return false;
        if (!hasGossip) return false;
        if (!hasReply) return false;
        if (!From.IsInitialized) return false;
        if (!Gossip.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _metricsGossipEnvelopeFieldNames;
      if (hasFrom) {
        output.WriteMessage(1, field_names[0], From);
      }
      if (hasGossip) {
        output.WriteMessage(2, field_names[1], Gossip);
      }
      if (hasReply) {
        output.WriteBool(3, field_names[2], Reply);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFrom) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, From);
        }
        if (hasGossip) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Gossip);
        }
        if (hasReply) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, Reply);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MetricsGossipEnvelope ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MetricsGossipEnvelope ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MetricsGossipEnvelope ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MetricsGossipEnvelope ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MetricsGossipEnvelope ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MetricsGossipEnvelope ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MetricsGossipEnvelope ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MetricsGossipEnvelope ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MetricsGossipEnvelope ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MetricsGossipEnvelope ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MetricsGossipEnvelope MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MetricsGossipEnvelope prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal sealed partial class Builder : pb::GeneratedBuilder<MetricsGossipEnvelope, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MetricsGossipEnvelope cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MetricsGossipEnvelope result;
      
      private MetricsGossipEnvelope PrepareBuilder() {
        if (resultIsReadOnly) {
          MetricsGossipEnvelope original = result;
          result = new MetricsGossipEnvelope();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MetricsGossipEnvelope MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Akka.Cluster.Metrics.Proto.Msg.MetricsGossipEnvelope.Descriptor; }
      }
      
      public override MetricsGossipEnvelope DefaultInstanceForType {
        get { return global::Akka.Cluster.Metrics.Proto.Msg.MetricsGossipEnvelope.DefaultInstance; }
      }
      
      public override MetricsGossipEnvelope BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MetricsGossipEnvelope) {
          return MergeFrom((MetricsGossipEnvelope) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MetricsGossipEnvelope other) {
        if (other == global::Akka.Cluster.Metrics.Proto.Msg.MetricsGossipEnvelope.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFrom) {
          MergeFrom(other.From);
        }
        if (other.HasGossip) {
          MergeGossip(other.Gossip);
        }
        if (other.HasReply) {
          Reply = other.Reply;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_metricsGossipEnvelopeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _metricsGossipEnvelopeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Akka.Cluster.Metrics.Proto.Msg.Address.Builder subBuilder = global::Akka.Cluster.Metrics.Proto.Msg.Address.CreateBuilder();
              if (result.hasFrom) {
                subBuilder.MergeFrom(From);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              From = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::Akka.Cluster.Metrics.Proto.Msg.MetricsGossip.Builder subBuilder = global::Akka.Cluster.Metrics.Proto.Msg.MetricsGossip.CreateBuilder();
              if (result.hasGossip) {
                subBuilder.MergeFrom(Gossip);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Gossip = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasReply = input.ReadBool(ref result.reply_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFrom {
       get { return result.hasFrom; }
      }
      public global::Akka.Cluster.Metrics.Proto.Msg.Address From {
        get { return result.From; }
        set { SetFrom(value); }
      }
      public Builder SetFrom(global::Akka.Cluster.Metrics.Proto.Msg.Address value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFrom = true;
        result.from_ = value;
        return this;
      }
      public Builder SetFrom(global::Akka.Cluster.Metrics.Proto.Msg.Address.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFrom = true;
        result.from_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFrom(global::Akka.Cluster.Metrics.Proto.Msg.Address value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFrom &&
            result.from_ != global::Akka.Cluster.Metrics.Proto.Msg.Address.DefaultInstance) {
            result.from_ = global::Akka.Cluster.Metrics.Proto.Msg.Address.CreateBuilder(result.from_).MergeFrom(value).BuildPartial();
        } else {
          result.from_ = value;
        }
        result.hasFrom = true;
        return this;
      }
      public Builder ClearFrom() {
        PrepareBuilder();
        result.hasFrom = false;
        result.from_ = null;
        return this;
      }
      
      public bool HasGossip {
       get { return result.hasGossip; }
      }
      public global::Akka.Cluster.Metrics.Proto.Msg.MetricsGossip Gossip {
        get { return result.Gossip; }
        set { SetGossip(value); }
      }
      public Builder SetGossip(global::Akka.Cluster.Metrics.Proto.Msg.MetricsGossip value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGossip = true;
        result.gossip_ = value;
        return this;
      }
      public Builder SetGossip(global::Akka.Cluster.Metrics.Proto.Msg.MetricsGossip.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGossip = true;
        result.gossip_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGossip(global::Akka.Cluster.Metrics.Proto.Msg.MetricsGossip value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGossip &&
            result.gossip_ != global::Akka.Cluster.Metrics.Proto.Msg.MetricsGossip.DefaultInstance) {
            result.gossip_ = global::Akka.Cluster.Metrics.Proto.Msg.MetricsGossip.CreateBuilder(result.gossip_).MergeFrom(value).BuildPartial();
        } else {
          result.gossip_ = value;
        }
        result.hasGossip = true;
        return this;
      }
      public Builder ClearGossip() {
        PrepareBuilder();
        result.hasGossip = false;
        result.gossip_ = null;
        return this;
      }
      
      public bool HasReply {
        get { return result.hasReply; }
      }
      public bool Reply {
        get { return result.Reply; }
        set { SetReply(value); }
      }
      public Builder SetReply(bool value) {
        PrepareBuilder();
        result.hasReply = true;
        result.reply_ = value;
        return this;
      }
      public Builder ClearReply() {
        PrepareBuilder();
        result.hasReply = false;
        result.reply_ = false;
        return this;
      }
    }
    static MetricsGossipEnvelope() {
      object.ReferenceEquals(global::Akka.Cluster.Metrics.Proto.Msg.ClusterMetricsMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class MetricsGossip : pb::GeneratedMessage<MetricsGossip, MetricsGossip.Builder> {
    private MetricsGossip() { }
    private static readonly MetricsGossip defaultInstance = new MetricsGossip().MakeReadOnly();
    private static readonly string[] _metricsGossipFieldNames = new string[] { "allAddresses", "allMetricNames", "nodeMetrics" };
    private static readonly uint[] _metricsGossipFieldTags = new uint[] { 10, 18, 26 };
    public static MetricsGossip DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MetricsGossip DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MetricsGossip ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Metrics.Proto.Msg.ClusterMetricsMessages.internal__static_MetricsGossip__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MetricsGossip, MetricsGossip.Builder> InternalFieldAccessors {
      get { return global::Akka.Cluster.Metrics.Proto.Msg.ClusterMetricsMessages.internal__static_MetricsGossip__FieldAccessorTable; }
    }
    
    public const int AllAddressesFieldNumber = 1;
    private pbc::PopsicleList<global::Akka.Cluster.Metrics.Proto.Msg.Address> allAddresses_ = new pbc::PopsicleList<global::Akka.Cluster.Metrics.Proto.Msg.Address>();
    public scg::IList<global::Akka.Cluster.Metrics.Proto.Msg.Address> AllAddressesList {
      get { return allAddresses_; }
    }
    public int AllAddressesCount {
      get { return allAddresses_.Count; }
    }
    public global::Akka.Cluster.Metrics.Proto.Msg.Address GetAllAddresses(int index) {
      return allAddresses_[index];
    }
    
    public const int AllMetricNamesFieldNumber = 2;
    private pbc::PopsicleList<string> allMetricNames_ = new pbc::PopsicleList<string>();
    public scg::IList<string> AllMetricNamesList {
      get { return pbc::Lists.AsReadOnly(allMetricNames_); }
    }
    public int AllMetricNamesCount {
      get { return allMetricNames_.Count; }
    }
    public string GetAllMetricNames(int index) {
      return allMetricNames_[index];
    }
    
    public const int NodeMetricsFieldNumber = 3;
    private pbc::PopsicleList<global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics> nodeMetrics_ = new pbc::PopsicleList<global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics>();
    public scg::IList<global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics> NodeMetricsList {
      get { return nodeMetrics_; }
    }
    public int NodeMetricsCount {
      get { return nodeMetrics_.Count; }
    }
    public global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics GetNodeMetrics(int index) {
      return nodeMetrics_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Akka.Cluster.Metrics.Proto.Msg.Address element in AllAddressesList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics element in NodeMetricsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _metricsGossipFieldNames;
      if (allAddresses_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], allAddresses_);
      }
      if (allMetricNames_.Count > 0) {
        output.WriteStringArray(2, field_names[1], allMetricNames_);
      }
      if (nodeMetrics_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], nodeMetrics_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Akka.Cluster.Metrics.Proto.Msg.Address element in AllAddressesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        {
          int dataSize = 0;
          foreach (string element in AllMetricNamesList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * allMetricNames_.Count;
        }
        foreach (global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics element in NodeMetricsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MetricsGossip ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MetricsGossip ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MetricsGossip ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MetricsGossip ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MetricsGossip ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MetricsGossip ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MetricsGossip ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MetricsGossip ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MetricsGossip ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MetricsGossip ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MetricsGossip MakeReadOnly() {
      allAddresses_.MakeReadOnly();
      allMetricNames_.MakeReadOnly();
      nodeMetrics_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MetricsGossip prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal sealed partial class Builder : pb::GeneratedBuilder<MetricsGossip, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MetricsGossip cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MetricsGossip result;
      
      private MetricsGossip PrepareBuilder() {
        if (resultIsReadOnly) {
          MetricsGossip original = result;
          result = new MetricsGossip();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MetricsGossip MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Akka.Cluster.Metrics.Proto.Msg.MetricsGossip.Descriptor; }
      }
      
      public override MetricsGossip DefaultInstanceForType {
        get { return global::Akka.Cluster.Metrics.Proto.Msg.MetricsGossip.DefaultInstance; }
      }
      
      public override MetricsGossip BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MetricsGossip) {
          return MergeFrom((MetricsGossip) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MetricsGossip other) {
        if (other == global::Akka.Cluster.Metrics.Proto.Msg.MetricsGossip.DefaultInstance) return this;
        PrepareBuilder();
        if (other.allAddresses_.Count != 0) {
          result.allAddresses_.Add(other.allAddresses_);
        }
        if (other.allMetricNames_.Count != 0) {
          result.allMetricNames_.Add(other.allMetricNames_);
        }
        if (other.nodeMetrics_.Count != 0) {
          result.nodeMetrics_.Add(other.nodeMetrics_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_metricsGossipFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _metricsGossipFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.allAddresses_, global::Akka.Cluster.Metrics.Proto.Msg.Address.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadStringArray(tag, field_name, result.allMetricNames_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.nodeMetrics_, global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Akka.Cluster.Metrics.Proto.Msg.Address> AllAddressesList {
        get { return PrepareBuilder().allAddresses_; }
      }
      public int AllAddressesCount {
        get { return result.AllAddressesCount; }
      }
      public global::Akka.Cluster.Metrics.Proto.Msg.Address GetAllAddresses(int index) {
        return result.GetAllAddresses(index);
      }
      public Builder SetAllAddresses(int index, global::Akka.Cluster.Metrics.Proto.Msg.Address value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allAddresses_[index] = value;
        return this;
      }
      public Builder SetAllAddresses(int index, global::Akka.Cluster.Metrics.Proto.Msg.Address.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.allAddresses_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAllAddresses(global::Akka.Cluster.Metrics.Proto.Msg.Address value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allAddresses_.Add(value);
        return this;
      }
      public Builder AddAllAddresses(global::Akka.Cluster.Metrics.Proto.Msg.Address.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.allAddresses_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAllAddresses(scg::IEnumerable<global::Akka.Cluster.Metrics.Proto.Msg.Address> values) {
        PrepareBuilder();
        result.allAddresses_.Add(values);
        return this;
      }
      public Builder ClearAllAddresses() {
        PrepareBuilder();
        result.allAddresses_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> AllMetricNamesList {
        get { return PrepareBuilder().allMetricNames_; }
      }
      public int AllMetricNamesCount {
        get { return result.AllMetricNamesCount; }
      }
      public string GetAllMetricNames(int index) {
        return result.GetAllMetricNames(index);
      }
      public Builder SetAllMetricNames(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allMetricNames_[index] = value;
        return this;
      }
      public Builder AddAllMetricNames(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allMetricNames_.Add(value);
        return this;
      }
      public Builder AddRangeAllMetricNames(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.allMetricNames_.Add(values);
        return this;
      }
      public Builder ClearAllMetricNames() {
        PrepareBuilder();
        result.allMetricNames_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics> NodeMetricsList {
        get { return PrepareBuilder().nodeMetrics_; }
      }
      public int NodeMetricsCount {
        get { return result.NodeMetricsCount; }
      }
      public global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics GetNodeMetrics(int index) {
        return result.GetNodeMetrics(index);
      }
      public Builder SetNodeMetrics(int index, global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.nodeMetrics_[index] = value;
        return this;
      }
      public Builder SetNodeMetrics(int index, global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.nodeMetrics_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddNodeMetrics(global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.nodeMetrics_.Add(value);
        return this;
      }
      public Builder AddNodeMetrics(global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.nodeMetrics_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeNodeMetrics(scg::IEnumerable<global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics> values) {
        PrepareBuilder();
        result.nodeMetrics_.Add(values);
        return this;
      }
      public Builder ClearNodeMetrics() {
        PrepareBuilder();
        result.nodeMetrics_.Clear();
        return this;
      }
    }
    static MetricsGossip() {
      object.ReferenceEquals(global::Akka.Cluster.Metrics.Proto.Msg.ClusterMetricsMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class NodeMetrics : pb::GeneratedMessage<NodeMetrics, NodeMetrics.Builder> {
    private NodeMetrics() { }
    private static readonly NodeMetrics defaultInstance = new NodeMetrics().MakeReadOnly();
    private static readonly string[] _nodeMetricsFieldNames = new string[] { "addressIndex", "metrics", "timestamp" };
    private static readonly uint[] _nodeMetricsFieldTags = new uint[] { 8, 26, 16 };
    public static NodeMetrics DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NodeMetrics DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NodeMetrics ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Metrics.Proto.Msg.ClusterMetricsMessages.internal__static_NodeMetrics__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NodeMetrics, NodeMetrics.Builder> InternalFieldAccessors {
      get { return global::Akka.Cluster.Metrics.Proto.Msg.ClusterMetricsMessages.internal__static_NodeMetrics__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      internal enum NumberType {
        Serialized = 0,
        Double = 1,
        Float = 2,
        Integer = 3,
        Long = 4,
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      internal sealed partial class Number : pb::GeneratedMessage<Number, Number.Builder> {
        private Number() { }
        private static readonly Number defaultInstance = new Number().MakeReadOnly();
        private static readonly string[] _numberFieldNames = new string[] { "serialized", "type", "value32", "value64" };
        private static readonly uint[] _numberFieldTags = new uint[] { 34, 8, 16, 24 };
        public static Number DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Number DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Number ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Akka.Cluster.Metrics.Proto.Msg.ClusterMetricsMessages.internal__static_NodeMetrics_Number__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Number, Number.Builder> InternalFieldAccessors {
          get { return global::Akka.Cluster.Metrics.Proto.Msg.ClusterMetricsMessages.internal__static_NodeMetrics_Number__FieldAccessorTable; }
        }
        
        public const int TypeFieldNumber = 1;
        private bool hasType;
        private global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.NumberType type_ = global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.NumberType.Serialized;
        public bool HasType {
          get { return hasType; }
        }
        public global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.NumberType Type {
          get { return type_; }
        }
        
        public const int Value32FieldNumber = 2;
        private bool hasValue32;
        private uint value32_;
        public bool HasValue32 {
          get { return hasValue32; }
        }
        [global::System.CLSCompliant(false)]
        public uint Value32 {
          get { return value32_; }
        }
        
        public const int Value64FieldNumber = 3;
        private bool hasValue64;
        private ulong value64_;
        public bool HasValue64 {
          get { return hasValue64; }
        }
        [global::System.CLSCompliant(false)]
        public ulong Value64 {
          get { return value64_; }
        }
        
        public const int SerializedFieldNumber = 4;
        private bool hasSerialized;
        private pb::ByteString serialized_ = pb::ByteString.Empty;
        public bool HasSerialized {
          get { return hasSerialized; }
        }
        public pb::ByteString Serialized {
          get { return serialized_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasType) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _numberFieldNames;
          if (hasType) {
            output.WriteEnum(1, field_names[1], (int) Type, Type);
          }
          if (hasValue32) {
            output.WriteUInt32(2, field_names[2], Value32);
          }
          if (hasValue64) {
            output.WriteUInt64(3, field_names[3], Value64);
          }
          if (hasSerialized) {
            output.WriteBytes(4, field_names[0], Serialized);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasType) {
              size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
            }
            if (hasValue32) {
              size += pb::CodedOutputStream.ComputeUInt32Size(2, Value32);
            }
            if (hasValue64) {
              size += pb::CodedOutputStream.ComputeUInt64Size(3, Value64);
            }
            if (hasSerialized) {
              size += pb::CodedOutputStream.ComputeBytesSize(4, Serialized);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Number ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Number ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Number ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Number ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Number ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Number ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Number ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Number ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Number ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Number ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Number MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Number prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal sealed partial class Builder : pb::GeneratedBuilder<Number, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Number cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Number result;
          
          private Number PrepareBuilder() {
            if (resultIsReadOnly) {
              Number original = result;
              result = new Number();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Number MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Number.Descriptor; }
          }
          
          public override Number DefaultInstanceForType {
            get { return global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Number.DefaultInstance; }
          }
          
          public override Number BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Number) {
              return MergeFrom((Number) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Number other) {
            if (other == global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Number.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasType) {
              Type = other.Type;
            }
            if (other.HasValue32) {
              Value32 = other.Value32;
            }
            if (other.HasValue64) {
              Value64 = other.Value64;
            }
            if (other.HasSerialized) {
              Serialized = other.Serialized;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_numberFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _numberFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  object unknown;
                  if(input.ReadEnum(ref result.type_, out unknown)) {
                    result.hasType = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(1, (ulong)(int)unknown);
                  }
                  break;
                }
                case 16: {
                  result.hasValue32 = input.ReadUInt32(ref result.value32_);
                  break;
                }
                case 24: {
                  result.hasValue64 = input.ReadUInt64(ref result.value64_);
                  break;
                }
                case 34: {
                  result.hasSerialized = input.ReadBytes(ref result.serialized_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasType {
           get { return result.hasType; }
          }
          public global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.NumberType Type {
            get { return result.Type; }
            set { SetType(value); }
          }
          public Builder SetType(global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.NumberType value) {
            PrepareBuilder();
            result.hasType = true;
            result.type_ = value;
            return this;
          }
          public Builder ClearType() {
            PrepareBuilder();
            result.hasType = false;
            result.type_ = global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.NumberType.Serialized;
            return this;
          }
          
          public bool HasValue32 {
            get { return result.hasValue32; }
          }
          [global::System.CLSCompliant(false)]
          public uint Value32 {
            get { return result.Value32; }
            set { SetValue32(value); }
          }
          [global::System.CLSCompliant(false)]
          public Builder SetValue32(uint value) {
            PrepareBuilder();
            result.hasValue32 = true;
            result.value32_ = value;
            return this;
          }
          public Builder ClearValue32() {
            PrepareBuilder();
            result.hasValue32 = false;
            result.value32_ = 0;
            return this;
          }
          
          public bool HasValue64 {
            get { return result.hasValue64; }
          }
          [global::System.CLSCompliant(false)]
          public ulong Value64 {
            get { return result.Value64; }
            set { SetValue64(value); }
          }
          [global::System.CLSCompliant(false)]
          public Builder SetValue64(ulong value) {
            PrepareBuilder();
            result.hasValue64 = true;
            result.value64_ = value;
            return this;
          }
          public Builder ClearValue64() {
            PrepareBuilder();
            result.hasValue64 = false;
            result.value64_ = 0UL;
            return this;
          }
          
          public bool HasSerialized {
            get { return result.hasSerialized; }
          }
          public pb::ByteString Serialized {
            get { return result.Serialized; }
            set { SetSerialized(value); }
          }
          public Builder SetSerialized(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasSerialized = true;
            result.serialized_ = value;
            return this;
          }
          public Builder ClearSerialized() {
            PrepareBuilder();
            result.hasSerialized = false;
            result.serialized_ = pb::ByteString.Empty;
            return this;
          }
        }
        static Number() {
          object.ReferenceEquals(global::Akka.Cluster.Metrics.Proto.Msg.ClusterMetricsMessages.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      internal sealed partial class EWMA : pb::GeneratedMessage<EWMA, EWMA.Builder> {
        private EWMA() { }
        private static readonly EWMA defaultInstance = new EWMA().MakeReadOnly();
        private static readonly string[] _eWMAFieldNames = new string[] { "alpha", "value" };
        private static readonly uint[] _eWMAFieldTags = new uint[] { 17, 9 };
        public static EWMA DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override EWMA DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override EWMA ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Akka.Cluster.Metrics.Proto.Msg.ClusterMetricsMessages.internal__static_NodeMetrics_EWMA__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<EWMA, EWMA.Builder> InternalFieldAccessors {
          get { return global::Akka.Cluster.Metrics.Proto.Msg.ClusterMetricsMessages.internal__static_NodeMetrics_EWMA__FieldAccessorTable; }
        }
        
        public const int ValueFieldNumber = 1;
        private bool hasValue;
        private double value_;
        public bool HasValue {
          get { return hasValue; }
        }
        public double Value {
          get { return value_; }
        }
        
        public const int AlphaFieldNumber = 2;
        private bool hasAlpha;
        private double alpha_;
        public bool HasAlpha {
          get { return hasAlpha; }
        }
        public double Alpha {
          get { return alpha_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasValue) return false;
            if (!hasAlpha) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _eWMAFieldNames;
          if (hasValue) {
            output.WriteDouble(1, field_names[1], Value);
          }
          if (hasAlpha) {
            output.WriteDouble(2, field_names[0], Alpha);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasValue) {
              size += pb::CodedOutputStream.ComputeDoubleSize(1, Value);
            }
            if (hasAlpha) {
              size += pb::CodedOutputStream.ComputeDoubleSize(2, Alpha);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static EWMA ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static EWMA ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static EWMA ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static EWMA ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static EWMA ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static EWMA ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static EWMA ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static EWMA ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static EWMA ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static EWMA ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private EWMA MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(EWMA prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal sealed partial class Builder : pb::GeneratedBuilder<EWMA, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(EWMA cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private EWMA result;
          
          private EWMA PrepareBuilder() {
            if (resultIsReadOnly) {
              EWMA original = result;
              result = new EWMA();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override EWMA MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.EWMA.Descriptor; }
          }
          
          public override EWMA DefaultInstanceForType {
            get { return global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.EWMA.DefaultInstance; }
          }
          
          public override EWMA BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is EWMA) {
              return MergeFrom((EWMA) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(EWMA other) {
            if (other == global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.EWMA.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasValue) {
              Value = other.Value;
            }
            if (other.HasAlpha) {
              Alpha = other.Alpha;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_eWMAFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _eWMAFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 9: {
                  result.hasValue = input.ReadDouble(ref result.value_);
                  break;
                }
                case 17: {
                  result.hasAlpha = input.ReadDouble(ref result.alpha_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasValue {
            get { return result.hasValue; }
          }
          public double Value {
            get { return result.Value; }
            set { SetValue(value); }
          }
          public Builder SetValue(double value) {
            PrepareBuilder();
            result.hasValue = true;
            result.value_ = value;
            return this;
          }
          public Builder ClearValue() {
            PrepareBuilder();
            result.hasValue = false;
            result.value_ = 0D;
            return this;
          }
          
          public bool HasAlpha {
            get { return result.hasAlpha; }
          }
          public double Alpha {
            get { return result.Alpha; }
            set { SetAlpha(value); }
          }
          public Builder SetAlpha(double value) {
            PrepareBuilder();
            result.hasAlpha = true;
            result.alpha_ = value;
            return this;
          }
          public Builder ClearAlpha() {
            PrepareBuilder();
            result.hasAlpha = false;
            result.alpha_ = 0D;
            return this;
          }
        }
        static EWMA() {
          object.ReferenceEquals(global::Akka.Cluster.Metrics.Proto.Msg.ClusterMetricsMessages.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      internal sealed partial class Metric : pb::GeneratedMessage<Metric, Metric.Builder> {
        private Metric() { }
        private static readonly Metric defaultInstance = new Metric().MakeReadOnly();
        private static readonly string[] _metricFieldNames = new string[] { "ewma", "nameIndex", "number" };
        private static readonly uint[] _metricFieldTags = new uint[] { 26, 8, 18 };
        public static Metric DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Metric DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Metric ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Akka.Cluster.Metrics.Proto.Msg.ClusterMetricsMessages.internal__static_NodeMetrics_Metric__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Metric, Metric.Builder> InternalFieldAccessors {
          get { return global::Akka.Cluster.Metrics.Proto.Msg.ClusterMetricsMessages.internal__static_NodeMetrics_Metric__FieldAccessorTable; }
        }
        
        public const int NameIndexFieldNumber = 1;
        private bool hasNameIndex;
        private int nameIndex_;
        public bool HasNameIndex {
          get { return hasNameIndex; }
        }
        public int NameIndex {
          get { return nameIndex_; }
        }
        
        public const int NumberFieldNumber = 2;
        private bool hasNumber;
        private global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Number number_;
        public bool HasNumber {
          get { return hasNumber; }
        }
        public global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Number Number {
          get { return number_ ?? global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Number.DefaultInstance; }
        }
        
        public const int EwmaFieldNumber = 3;
        private bool hasEwma;
        private global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.EWMA ewma_;
        public bool HasEwma {
          get { return hasEwma; }
        }
        public global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.EWMA Ewma {
          get { return ewma_ ?? global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.EWMA.DefaultInstance; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasNameIndex) return false;
            if (!hasNumber) return false;
            if (!Number.IsInitialized) return false;
            if (HasEwma) {
              if (!Ewma.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _metricFieldNames;
          if (hasNameIndex) {
            output.WriteInt32(1, field_names[1], NameIndex);
          }
          if (hasNumber) {
            output.WriteMessage(2, field_names[2], Number);
          }
          if (hasEwma) {
            output.WriteMessage(3, field_names[0], Ewma);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasNameIndex) {
              size += pb::CodedOutputStream.ComputeInt32Size(1, NameIndex);
            }
            if (hasNumber) {
              size += pb::CodedOutputStream.ComputeMessageSize(2, Number);
            }
            if (hasEwma) {
              size += pb::CodedOutputStream.ComputeMessageSize(3, Ewma);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Metric ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Metric ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Metric ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Metric ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Metric ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Metric ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Metric ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Metric ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Metric ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Metric ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Metric MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Metric prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal sealed partial class Builder : pb::GeneratedBuilder<Metric, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Metric cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Metric result;
          
          private Metric PrepareBuilder() {
            if (resultIsReadOnly) {
              Metric original = result;
              result = new Metric();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Metric MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Metric.Descriptor; }
          }
          
          public override Metric DefaultInstanceForType {
            get { return global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Metric.DefaultInstance; }
          }
          
          public override Metric BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Metric) {
              return MergeFrom((Metric) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Metric other) {
            if (other == global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Metric.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasNameIndex) {
              NameIndex = other.NameIndex;
            }
            if (other.HasNumber) {
              MergeNumber(other.Number);
            }
            if (other.HasEwma) {
              MergeEwma(other.Ewma);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_metricFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _metricFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasNameIndex = input.ReadInt32(ref result.nameIndex_);
                  break;
                }
                case 18: {
                  global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Number.Builder subBuilder = global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Number.CreateBuilder();
                  if (result.hasNumber) {
                    subBuilder.MergeFrom(Number);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Number = subBuilder.BuildPartial();
                  break;
                }
                case 26: {
                  global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.EWMA.Builder subBuilder = global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.EWMA.CreateBuilder();
                  if (result.hasEwma) {
                    subBuilder.MergeFrom(Ewma);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Ewma = subBuilder.BuildPartial();
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasNameIndex {
            get { return result.hasNameIndex; }
          }
          public int NameIndex {
            get { return result.NameIndex; }
            set { SetNameIndex(value); }
          }
          public Builder SetNameIndex(int value) {
            PrepareBuilder();
            result.hasNameIndex = true;
            result.nameIndex_ = value;
            return this;
          }
          public Builder ClearNameIndex() {
            PrepareBuilder();
            result.hasNameIndex = false;
            result.nameIndex_ = 0;
            return this;
          }
          
          public bool HasNumber {
           get { return result.hasNumber; }
          }
          public global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Number Number {
            get { return result.Number; }
            set { SetNumber(value); }
          }
          public Builder SetNumber(global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Number value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasNumber = true;
            result.number_ = value;
            return this;
          }
          public Builder SetNumber(global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Number.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasNumber = true;
            result.number_ = builderForValue.Build();
            return this;
          }
          public Builder MergeNumber(global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Number value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasNumber &&
                result.number_ != global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Number.DefaultInstance) {
                result.number_ = global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Number.CreateBuilder(result.number_).MergeFrom(value).BuildPartial();
            } else {
              result.number_ = value;
            }
            result.hasNumber = true;
            return this;
          }
          public Builder ClearNumber() {
            PrepareBuilder();
            result.hasNumber = false;
            result.number_ = null;
            return this;
          }
          
          public bool HasEwma {
           get { return result.hasEwma; }
          }
          public global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.EWMA Ewma {
            get { return result.Ewma; }
            set { SetEwma(value); }
          }
          public Builder SetEwma(global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.EWMA value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasEwma = true;
            result.ewma_ = value;
            return this;
          }
          public Builder SetEwma(global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.EWMA.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasEwma = true;
            result.ewma_ = builderForValue.Build();
            return this;
          }
          public Builder MergeEwma(global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.EWMA value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasEwma &&
                result.ewma_ != global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.EWMA.DefaultInstance) {
                result.ewma_ = global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.EWMA.CreateBuilder(result.ewma_).MergeFrom(value).BuildPartial();
            } else {
              result.ewma_ = value;
            }
            result.hasEwma = true;
            return this;
          }
          public Builder ClearEwma() {
            PrepareBuilder();
            result.hasEwma = false;
            result.ewma_ = null;
            return this;
          }
        }
        static Metric() {
          object.ReferenceEquals(global::Akka.Cluster.Metrics.Proto.Msg.ClusterMetricsMessages.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int AddressIndexFieldNumber = 1;
    private bool hasAddressIndex;
    private int addressIndex_;
    public bool HasAddressIndex {
      get { return hasAddressIndex; }
    }
    public int AddressIndex {
      get { return addressIndex_; }
    }
    
    public const int TimestampFieldNumber = 2;
    private bool hasTimestamp;
    private long timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public long Timestamp {
      get { return timestamp_; }
    }
    
    public const int MetricsFieldNumber = 3;
    private pbc::PopsicleList<global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Metric> metrics_ = new pbc::PopsicleList<global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Metric>();
    public scg::IList<global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Metric> MetricsList {
      get { return metrics_; }
    }
    public int MetricsCount {
      get { return metrics_.Count; }
    }
    public global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Metric GetMetrics(int index) {
      return metrics_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAddressIndex) return false;
        if (!hasTimestamp) return false;
        foreach (global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Metric element in MetricsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _nodeMetricsFieldNames;
      if (hasAddressIndex) {
        output.WriteInt32(1, field_names[0], AddressIndex);
      }
      if (hasTimestamp) {
        output.WriteInt64(2, field_names[2], Timestamp);
      }
      if (metrics_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], metrics_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAddressIndex) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, AddressIndex);
        }
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, Timestamp);
        }
        foreach (global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Metric element in MetricsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NodeMetrics ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NodeMetrics ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NodeMetrics ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NodeMetrics ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NodeMetrics ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NodeMetrics ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NodeMetrics ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NodeMetrics ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NodeMetrics ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NodeMetrics ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NodeMetrics MakeReadOnly() {
      metrics_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NodeMetrics prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal sealed partial class Builder : pb::GeneratedBuilder<NodeMetrics, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NodeMetrics cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NodeMetrics result;
      
      private NodeMetrics PrepareBuilder() {
        if (resultIsReadOnly) {
          NodeMetrics original = result;
          result = new NodeMetrics();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NodeMetrics MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Descriptor; }
      }
      
      public override NodeMetrics DefaultInstanceForType {
        get { return global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.DefaultInstance; }
      }
      
      public override NodeMetrics BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NodeMetrics) {
          return MergeFrom((NodeMetrics) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NodeMetrics other) {
        if (other == global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAddressIndex) {
          AddressIndex = other.AddressIndex;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.metrics_.Count != 0) {
          result.metrics_.Add(other.metrics_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_nodeMetricsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _nodeMetricsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAddressIndex = input.ReadInt32(ref result.addressIndex_);
              break;
            }
            case 16: {
              result.hasTimestamp = input.ReadInt64(ref result.timestamp_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.metrics_, global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Metric.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAddressIndex {
        get { return result.hasAddressIndex; }
      }
      public int AddressIndex {
        get { return result.AddressIndex; }
        set { SetAddressIndex(value); }
      }
      public Builder SetAddressIndex(int value) {
        PrepareBuilder();
        result.hasAddressIndex = true;
        result.addressIndex_ = value;
        return this;
      }
      public Builder ClearAddressIndex() {
        PrepareBuilder();
        result.hasAddressIndex = false;
        result.addressIndex_ = 0;
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public long Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(long value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0L;
        return this;
      }
      
      public pbc::IPopsicleList<global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Metric> MetricsList {
        get { return PrepareBuilder().metrics_; }
      }
      public int MetricsCount {
        get { return result.MetricsCount; }
      }
      public global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Metric GetMetrics(int index) {
        return result.GetMetrics(index);
      }
      public Builder SetMetrics(int index, global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Metric value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.metrics_[index] = value;
        return this;
      }
      public Builder SetMetrics(int index, global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Metric.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.metrics_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMetrics(global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Metric value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.metrics_.Add(value);
        return this;
      }
      public Builder AddMetrics(global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Metric.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.metrics_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMetrics(scg::IEnumerable<global::Akka.Cluster.Metrics.Proto.Msg.NodeMetrics.Types.Metric> values) {
        PrepareBuilder();
        result.metrics_.Add(values);
        return this;
      }
      public Builder ClearMetrics() {
        PrepareBuilder();
        result.metrics_.Clear();
        return this;
      }
    }
    static NodeMetrics() {
      object.ReferenceEquals(global::Akka.Cluster.Metrics.Proto.Msg.ClusterMetricsMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class Address : pb::GeneratedMessage<Address, Address.Builder> {
    private Address() { }
    private static readonly Address defaultInstance = new Address().MakeReadOnly();
    private static readonly string[] _addressFieldNames = new string[] { "hostname", "port", "protocol", "system" };
    private static readonly uint[] _addressFieldTags = new uint[] { 18, 24, 34, 10 };
    public static Address DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Address DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Address ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Metrics.Proto.Msg.ClusterMetricsMessages.internal__static_Address__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Address, Address.Builder> InternalFieldAccessors {
      get { return global::Akka.Cluster.Metrics.Proto.Msg.ClusterMetricsMessages.internal__static_Address__FieldAccessorTable; }
    }
    
    public const int SystemFieldNumber = 1;
    private bool hasSystem;
    private string system_ = "";
    public bool HasSystem {
      get { return hasSystem; }
    }
    public string System {
      get { return system_; }
    }
    
    public const int HostnameFieldNumber = 2;
    private bool hasHostname;
    private string hostname_ = "";
    public bool HasHostname {
      get { return hasHostname; }
    }
    public string Hostname {
      get { return hostname_; }
    }
    
    public const int PortFieldNumber = 3;
    private bool hasPort;
    private uint port_;
    public bool HasPort {
      get { return hasPort; }
    }
    [global::System.CLSCompliant(false)]
    public uint Port {
      get { return port_; }
    }
    
    public const int ProtocolFieldNumber = 4;
    private bool hasProtocol;
    private string protocol_ = "";
    public bool HasProtocol {
      get { return hasProtocol; }
    }
    public string Protocol {
      get { return protocol_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSystem) return false;
        if (!hasHostname) return false;
        if (!hasPort) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _addressFieldNames;
      if (hasSystem) {
        output.WriteString(1, field_names[3], System);
      }
      if (hasHostname) {
        output.WriteString(2, field_names[0], Hostname);
      }
      if (hasPort) {
        output.WriteUInt32(3, field_names[1], Port);
      }
      if (hasProtocol) {
        output.WriteString(4, field_names[2], Protocol);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSystem) {
          size += pb::CodedOutputStream.ComputeStringSize(1, System);
        }
        if (hasHostname) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Hostname);
        }
        if (hasPort) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, Port);
        }
        if (hasProtocol) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Protocol);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Address ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Address ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Address ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Address ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Address ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Address ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Address ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Address ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Address ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Address ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Address MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Address prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal sealed partial class Builder : pb::GeneratedBuilder<Address, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Address cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Address result;
      
      private Address PrepareBuilder() {
        if (resultIsReadOnly) {
          Address original = result;
          result = new Address();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Address MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Akka.Cluster.Metrics.Proto.Msg.Address.Descriptor; }
      }
      
      public override Address DefaultInstanceForType {
        get { return global::Akka.Cluster.Metrics.Proto.Msg.Address.DefaultInstance; }
      }
      
      public override Address BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Address) {
          return MergeFrom((Address) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Address other) {
        if (other == global::Akka.Cluster.Metrics.Proto.Msg.Address.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSystem) {
          System = other.System;
        }
        if (other.HasHostname) {
          Hostname = other.Hostname;
        }
        if (other.HasPort) {
          Port = other.Port;
        }
        if (other.HasProtocol) {
          Protocol = other.Protocol;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_addressFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _addressFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSystem = input.ReadString(ref result.system_);
              break;
            }
            case 18: {
              result.hasHostname = input.ReadString(ref result.hostname_);
              break;
            }
            case 24: {
              result.hasPort = input.ReadUInt32(ref result.port_);
              break;
            }
            case 34: {
              result.hasProtocol = input.ReadString(ref result.protocol_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSystem {
        get { return result.hasSystem; }
      }
      public string System {
        get { return result.System; }
        set { SetSystem(value); }
      }
      public Builder SetSystem(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSystem = true;
        result.system_ = value;
        return this;
      }
      public Builder ClearSystem() {
        PrepareBuilder();
        result.hasSystem = false;
        result.system_ = "";
        return this;
      }
      
      public bool HasHostname {
        get { return result.hasHostname; }
      }
      public string Hostname {
        get { return result.Hostname; }
        set { SetHostname(value); }
      }
      public Builder SetHostname(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHostname = true;
        result.hostname_ = value;
        return this;
      }
      public Builder ClearHostname() {
        PrepareBuilder();
        result.hasHostname = false;
        result.hostname_ = "";
        return this;
      }
      
      public bool HasPort {
        get { return result.hasPort; }
      }
      [global::System.CLSCompliant(false)]
      public uint Port {
        get { return result.Port; }
        set { SetPort(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPort(uint value) {
        PrepareBuilder();
        result.hasPort = true;
        result.port_ = value;
        return this;
      }
      public Builder ClearPort() {
        PrepareBuilder();
        result.hasPort = false;
        result.port_ = 0;
        return this;
      }
      
      public bool HasProtocol {
        get { return result.hasProtocol; }
      }
      public string Protocol {
        get { return result.Protocol; }
        set { SetProtocol(value); }
      }
      public Builder SetProtocol(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasProtocol = true;
        result.protocol_ = value;
        return this;
      }
      public Builder ClearProtocol() {
        PrepareBuilder();
        result.hasProtocol = false;
        result.protocol_ = "";
        return this;
      }
    }
    static Address() {
      object.ReferenceEquals(global::Akka.Cluster.Metrics.Proto.Msg.ClusterMetricsMessages.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
